require 'matrix'
require 'distribution'

module Finance
  module AssetPerformanceGenerator

    extend self


    ##
    # RETURNS:
    # inflation_outcomes = [
    #   [......],
    #   [inflation_month_1, inflation_month_2],
    #   [.......]
    # ]
    ##
    def generate_inflation_outcomes(number_of_outcomes=1, number_of_periods=1440) # 1440 = 120 years in months
      inflation_mean, inflation_std_dev     = Inflation.mean, Inflation.std_dev
      inflation_distribution                = Distribution::Normal.rng(inflation_mean.to_f, inflation_std_dev.to_f)

      inflation_outcomes = []
      number_of_outcomes.times do
        inflation_outcomes << number_of_periods.times.map {inflation_distribution.call}
      end
      return inflation_outcomes
    end


    ##
    # Output is monthly data.
    # This only computed asset outcomes (return not based on a specific portfolio
    # ) and can therefore be precomputed. Application to a specific portfolio is
    # in a different method.
    # RETURNS:
    # asset_outcomes = [
    #   [......],
    #   [
    #     "XRE" => [return_month_1, return_month_2,...],
    #     "GSG" => [return_month_1, return_month_2,...]
    #   ],
    #   [.......]
    # ]
    ##
    def generate_asset_outcomes(number_of_outcomes=1, number_of_periods=1440, return_source=:implied_return) # other option for return_source :mean_return

      ##################
      # Precomputation #
      ##################

      # Pull all securities data from DB. Format for use. Ordering tickers alphabetically.
      # OPTIMIZE: Should loading these securities be saved in a cache?
      asset_data = Security.all.order(:ticker).select([:ticker, return_source, :std_dev, :returns]).map do |security|
        {
          ticker: security.ticker,
          mean_return: security.send(return_source),
          std_dev: security.std_dev,
          returns: security.returns
        }
      end

      # Precompute the correlations/cholesky decomposition.
      return_data         = asset_data.inject({}) {|h, security| h[security[:ticker]] = security[:returns]; h }
      correlation_matrix  = Finance::MatrixMethods.correlation(return_data)
      cholesky_decomp     = Finance::MatrixMethods.cholesky_decomposition(correlation_matrix)

      # Compile descriptive data on securities
      tickers               = asset_data.inject([]) {|array, security| array << security[:ticker]; array}
      weekly_mean_returns   = asset_data.inject([]) {|array, security| array << security[:mean_return]; array}
      weekly_std_devs       = asset_data.inject([]) {|array, security| array << security[:std_dev]; array}

      # Using monthly data for inflation & real estate - need to be consistent
      # with securities data.
      monthly_mean_returns  = weekly_mean_returns.map { |weekly_ret|  (1 + weekly_ret.to_f) ** (52/12) - 1 }
      monthly_std_devs      = weekly_std_devs.map {|weekly_sd| weekly_sd.to_f * Math.sqrt(52/12)  }


      ######################
      # Model Realizations #
      ######################

      asset_outcomes = number_of_outcomes.times.map do
        generate_single_asset_perf_realization(number_of_periods, tickers, cholesky_decomp, monthly_mean_returns, monthly_std_devs)
      end

      asset_outcomes
    end


    # Consolidate the asset-level data into a single value for the user's
    # selected portfolio.
    def convert_asset_outcomes_to_portfolio_outcomes(asset_outcomes, selected_portfolio_weights)
      portfolio_outcomes = asset_outcomes.map do |realization|
        relevant_tickers = realization.slice(*selected_portfolio_weights.keys)
        weighted_returns = Hash[relevant_tickers.map do |ticker, returns|
          [ticker, returns.map { |ret| ret * selected_portfolio_weights[ticker] }]
        end]
        arranged_by_time_not_weight = Matrix.rows(weighted_returns.values).transpose
        arranged_by_time_not_weight.row_vectors.map do |time_period_asset_returns|
          time_period_asset_returns.inject(0) { |sum, el| sum += el }
        end
      end

      portfolio_outcomes
    end


    private

    def generate_single_asset_perf_realization(number_of_periods, tickers, cholesky_decomp, mean_returns, std_devs)
      number_of_assets    = tickers.count
      random_value_matrix = Finance::MatrixMethods.generate_random_normal_matrix(number_of_periods, number_of_assets)
      cholesky_applied    = apply_cholesky_factors(random_value_matrix, cholesky_decomp)
      return_arrays       = generate_returns(mean_returns, std_devs, cholesky_applied)
      asset_returns       = Hash[tickers.zip(return_arrays)]
    end

    def apply_cholesky_factors(randoms, cholesky)
      number_of_periods = randoms.row_size
      number_of_assets  = randoms.row(0).size
      choleskyied_array = Matrix.zero(number_of_periods, number_of_assets)

      (0...number_of_periods).each do |row|
        (0...number_of_assets).each do |column|
          answer = 0
          if column == 0
            answer = randoms[row, 0]
          else
            0.upto(column) do |i|
              answer += randoms[row, i] * cholesky[column, i]
            end
          end
          choleskyied_array.send(:[]=, row, column, answer) # For some stupid reason, Ruby Matrices are immutable. Going to force it.
        end
      end

      return choleskyied_array
    end

    def generate_returns(mean_returns, std_devs, cholesky_applied)
      number_of_periods = cholesky_applied.row_size
      number_of_assets  = cholesky_applied.row(0).size
      prices = Array.new(number_of_periods).map! {Array.new(number_of_assets, 0.0)}

      (0...number_of_periods).each do |row|
        (0...number_of_assets).each do |column|
          row == 0 ? (starting_value = 0.0) : (starting_value = prices[row-1][column])
          b = (mean_returns[column]-0.5*(std_devs[column])**2)
          c = (std_devs[column])*cholesky_applied[row, column] # cholesky_applied accessed as a matrix [1,2] vs. [1][2]
          prices[row][column] = starting_value + b + c # Can't do the exp(x) in the same step as you need to use the previous value as a starting price!
        end
      end

      prices.each do |row|
        row.map! {|item| Math.exp(item)}
      end

      initial_prices = Array.new(number_of_assets) { 1.0 }
      prices.unshift(initial_prices)

      # Each row in this matrix is a list of asset prices in each year - NOT the
      # progression of a single asset. We'll need to grab columns for that ( or
      # transpose).
      # We also want to convert the prices (e.g. 1.0, 1.001, 1.12, 1.08) to
      # percentage returns in each time period.
      return Matrix.rows(prices).column_vectors.map do |column_vector|
        percentage_returns = []
        column_vector.each_with_index do |value, index|
          next if index == 0
          last_value = column_vector[index - 1]
          pct_return = (value - last_value) / last_value
          percentage_returns << pct_return
        end
        percentage_returns
      end
    end


  end
end
